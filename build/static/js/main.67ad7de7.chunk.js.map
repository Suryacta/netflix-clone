{"version":3,"sources":["Nav.js","axios.js","Requests.js","Banner.js","Row.js","Homescreen.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","transitionBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","name","original_name","title","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","poster_path","id","videoId","opts","height","width","playerVars","autoplay","Homescreen","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67ad7de7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport'./Nav.css';\r\n\r\nfunction Nav() {\r\n    const[show, handleShow]=useState(false);\r\n    const transitionBar=()=>{\r\n        if(window.scrollY>100){\r\n            handleShow(true);\r\n        }else{\r\n            handleShow(false);\r\n        }\r\n\r\n    };\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\", transitionBar);\r\n        return ()=>window.removeEventListener(\"scroll\", transitionBar);      \r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && `nav_black`}`}>\r\n            <div className=\"nav_contents\">           \r\n            <img className=\"nav_logo\"\r\n            src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\"/>\r\n            <img className=\"nav_avatar\"\r\n            src=\"https://i1.wp.com/matrixstore.pk/wp-content/uploads/2021/04/DmBraqkXcAA1Yco.jpg?fit=318%2C316&ssl=1\" alt=\"\"/>\r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import axios from \"axios\";\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\nexport default instance;","const API_KEY = \"fa9fc510003a74f558fd9ceeb7e19c33\";\r\nconst requests={\r\nfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`, \r\nfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en=US`,\r\nfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\nfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`, \r\nfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\nfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`, \r\nfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n};\r\n\r\nexport default requests; ","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './Requests';\r\nimport\"./Banner.css\";\r\n\r\n\r\nfunction Banner() {\r\nconst[movie, setMovie] = useState([]);\r\nuseEffect(()=>{\r\nasync function fetchData(){\r\n    const request = await axios.get(requests.fetchTrending);\r\n    setMovie(request.data.results[\r\n        Math.floor(Math.random()*request.data.results.length - 1)\r\n    ]);\r\n    return request;\r\n}\r\nfetchData();\r\n}, []);\r\n  \r\n    function truncate(string, n){\r\n        return string?.length>n ? string.substr(0, n-1)+'...' : string;\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <header className=\"banner\" style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\",\r\n        }}>\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\"> {movie?.name|| movie?.original_name || movie?.title} </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">{truncate(movie?.overview,150)}</h1>\r\n            </div>\r\n            <div className=\"banner--fadebottom\" />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner\r\n","import axios from './axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport\"./Row.css\";\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow = false}) {  \r\n    const [movies, setMovies]=useState([]);\r\n    const [trailerUrl, setTrailerUrl]=useState(\"\");\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n        }, [fetchUrl]);\r\n        const opts={\r\n            height:\"390\",\r\n            width:\"100%\",\r\n            playerVars:{\r\n                autoplay: 1,\r\n            }\r\n        };\r\n        const handleClick=(movie)=>{\r\n            if (trailerUrl){\r\n                setTrailerUrl(\"\");\r\n            }else{\r\n                movieTrailer(movie?.name ||\"\")\r\n                .then((url)=>{\r\n                   // https://www.youtube.com/watch?v=XtMThy8QKqU\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get(\"v\")); \r\n\r\n                }).catch((error)=>console.log(error));\r\n                      \r\n                }\r\n            };\r\n        \r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n            {movies.map((movie)=>(\r\n                <img \r\n                className={`row_poster ${isLargeRow &&\"row_posterlarge\"}`}\r\n                key={movie.id}\r\n                onClick={()=>handleClick(movie)}\r\n                src={`${base_url}${isLargeRow? movie.poster_path:movie.backdrop_path}`}alt={movie.name}/>\r\n\r\n            ))}\r\n        </div>\r\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport \"./Homescreen.css\"; \r\nimport Nav from './Nav';\r\nimport Banner from './Banner';\r\nimport requests from './Requests';\r\nimport Row from './Row';\r\n\r\nfunction Homescreen() {\r\n    return (\r\n        <div className=\"homeScreen\">  \r\n        <Nav />;\r\n        <Banner />;\r\n        <Row title=\"TopRated\" fetchUrl={requests.fetchTopRated} isLargeRow/>\r\n        <Row title=\"Trending\" fetchUrl={requests.fetchTrending}/>\r\n        <Row title=\"ActionMovies\" fetchUrl={requests.fetchActionMovies}/>\r\n        <Row title=\"ComedyMovies\" fetchUrl={requests.fetchComedyMovies}/>\r\n        <Row title=\"HorrorMovies\" fetchUrl={requests.fetchHorrorMovies}/>\r\n        <Row title=\"RomanceMovies\" fetchUrl={requests.fetchRomanceMovies}/>\r\n        <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\r\n        \r\n       \r\n        </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default Homescreen;\r\n","import React from 'react';\nimport './App.css';\nimport Homescreen from './Homescreen';\n\n\nfunction App() {\n\n  \n  return (\n    <div className=\"App\">\n     \n         \n      \n          \n            <Homescreen />\n        \n    </div>\n  );\n        \n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}